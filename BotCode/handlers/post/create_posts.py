import uuid
from threading import Lock

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from BotCode.core.storage import storage
from BotCode.utils import textmd2

router = Router()

class PostState(StatesGroup):
    waiting_for_text = State()
    waiting_for_privacy = State()
    waiting_for_id = State()
    waiting_for_image = State()
    waiting_for_buttons = State()

post_id_lock = Lock()

# --- Utility functions ---
def make_inline_markup(rows: list[list[InlineKeyboardButton]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=rows)

def cancel_button() -> InlineKeyboardMarkup:
    return make_inline_markup([[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]])

def privacy_markup(is_private: bool) -> InlineKeyboardMarkup:
    toggle = InlineKeyboardButton(
        text="üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π" if is_private else "üîì –ü—É–±–ª–∏—á–Ω—ã–π",
        callback_data="toggle_privacy"
    )
    cont = InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è", callback_data="continue_creation")
    return make_inline_markup([[toggle], [cont]])

def parse_buttons(text: str) -> list[list[dict]]:
    rows: list[list[dict]] = []
    current: list[dict] = []
    for raw in text.splitlines():
        line = raw.strip()
        if not line:
            if current:
                rows.append(current)
                current = []
            continue
        if '|' not in line:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: '{line}'")
        label, action = map(str.strip, line.split('|', 1))
        btn: dict = {"text": label}
        if action.startswith('notification:'):
            btn['notification'] = action.split(':', 1)[1]
            btn['show_alert'] = True
        elif action.startswith('copy:'):
            btn['callback_data'] = f"copy_{uuid.uuid4().hex}"
            btn['copy_text'] = action.split(':', 1)[1]
        elif action.startswith('switch_inline:'):
            btn['switch_inline_query'] = action.split(':', 1)[1]
        elif action.startswith('switch_inline_current:'):
            btn['switch_inline_query_current_chat'] = action.split(':', 1)[1]
        elif action.startswith('switch_inline_chosen:'):
            btn['switch_inline_query_chosen_chat'] = action.split(':', 1)[1]
        elif action.startswith(('http://', 'https://')):
            btn['url'] = action
        else:
            btn['callback_data'] = action
        current.append(btn)
    if current:
        rows.append(current)
    return rows

# --- Handlers ---
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Çüìî")
async def start_creation(message: Message, state: FSMContext):
    await state.set_state(PostState.waiting_for_text)
    await state.update_data(private=False, buttons=[])
    await message.reply(
        textmd2(
            """–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ @userbotname
<b>–ñ–∏—Ä–Ω—ã–π</b>
<i>–ö—É—Ä—Å–∏–≤</i>
<u>–ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π</u>
<s>–ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π</s>
<code>–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π</code>
<pre>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π</pre>
<a href=\"https://example.com\">–°—Å—ã–ª–∫–∞</a>
"""
        ),
        reply_markup=cancel_button(), parse_mode=None
    )

@router.message(PostState.waiting_for_text)
async def got_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text or message.caption or "")
    await state.set_state(PostState.waiting_for_privacy)
    data = await state.get_data()
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞:",
        reply_markup=privacy_markup(data.get('private', False))
    )

@router.callback_query(lambda c: c.data == "toggle_privacy")
async def toggle_privacy(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    is_priv = not data.get('private', False)
    await state.update_data(private=is_priv)
    await cq.message.edit_reply_markup(
        reply_markup=privacy_markup(is_priv)
    )
    await cq.answer()

@router.callback_query(lambda c: c.data == "continue_creation")
async def continue_to_id(cq: CallbackQuery, state: FSMContext):
    await state.set_state(PostState.waiting_for_id)
    await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á—ë—Ä–∫–∏):")
    await cq.answer()

@router.message(PostState.waiting_for_id)
async def got_id(message: Message, state: FSMContext):
    pid = message.text.strip()
    if not pid.replace('_', '').isalnum():
        await message.reply(
            "ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.",
            reply_markup=cancel_button()
        )
        return

    with post_id_lock:
        if not storage.is_post_available(pid):
            await message.reply(
                text="–≠—Ç–æ—Ç ID —É–∂–µ –∑–∞–Ω—è—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:",
                reply_markup=cancel_button()
            )
            return

    await state.update_data(post_id=pid)
    await state.set_state(PostState.waiting_for_image)
    await message.reply(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ '–Ω–µ—Ç':\n"
        "–ü—Ä–∏–º–µ—Ä: https://img4.teletype.in/files/f2/47/...",
        reply_markup=cancel_button()
    )

@router.message(PostState.waiting_for_image)
async def got_image(message: Message, state: FSMContext):
    img = message.text.strip()
    if img.lower() in ('–Ω–µ—Ç', 'no', 'none'):
        img = ''
    await state.update_data(image=img)
    await state.set_state(PostState.waiting_for_buttons)
    await message.reply(
        textmd2(
            """–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É:
–ö–Ω–æ–ø–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ | void
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | notification:–î–ª—è –≤–∞—Å!
–ö–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–∞ | https://google.com
–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ | copy:–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞!
–î–ª—è –æ–¥–Ω–æ–≥–æ | callback_data | allowed_ids=123 | unauthorized_message=–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞

–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–æ–≤—ã–π —Ä—è–¥. /done ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å."""
        ),
        reply_markup=cancel_button(), parse_mode=None
    )

@router.message(PostState.waiting_for_buttons)
async def got_buttons(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    uid = message.from_user.id
    pid = data['post_id']
    try:
        if text.lower() in ('/done', 'none'):
            btns = data.get('buttons', []) if text == '/done' else []
            posts = storage.load_user_posts(uid)
            posts[pid] = {
                'user_id': uid,
                'text': data['text'],
                'image': data['image'],
                'buttons': btns,
                'private': data.get('private', False)
            }
            storage.save_user_posts(uid, posts)
            await message.reply(
                f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω! ID: {pid}\n"
                f"{'üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π' if data.get('private') else 'üîì –ü—É–±–ª–∏—á–Ω—ã–π'}\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>@{(await message.bot.me()).username} {pid}</code>"
            )
            await state.clear()
            return

        rows = parse_buttons(text)
        existing = data.get('buttons', [])
        await state.update_data(buttons=existing + rows)
        await message.reply(
            text="‚úÖ –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ /done –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.",
            reply_markup=cancel_button()
        )
    except ValueError as err:
        await message.reply(f"‚ùå {err}")

@router.callback_query(lambda c: c.data == "cancel_creation")
async def cancel(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await cq.message.reply(textmd2("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω."))
    await cq.answer()
