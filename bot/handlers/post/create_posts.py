# bot/modules/create_post.py
import re
import uuid
from threading import Lock

from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.core import storage

router: Router = Router(name="create_post_router")


class PostState(StatesGroup):
    waiting_for_text = State()
    waiting_for_privacy = State()
    waiting_for_id = State()
    waiting_for_image = State()
    waiting_for_buttons = State()
    preview = State()
    editing_choice = State()


post_id_lock: Lock = Lock()


# --- Utility functions ---
def make_inline_markup(rows: list[list[InlineKeyboardButton]]) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=rows)


def cancel_button() -> InlineKeyboardMarkup:
    return make_inline_markup([[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]])


def privacy_markup(is_private: bool) -> InlineKeyboardMarkup:
    toggle = InlineKeyboardButton(
        text="üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π" if is_private else "üîì –ü—É–±–ª–∏—á–Ω—ã–π",
        callback_data="toggle_privacy"
    )
    cont = InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è", callback_data="continue_creation")
    return make_inline_markup([[toggle], [cont]])


def parse_buttons(text: str, post_id: str) -> list[list[dict]]:
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å:
      –¢–µ–∫—Å—Ç | msg:–¢–æ–ª—å–∫–æ –¥–ª—è –±–æ—Å—Å–æ–≤ | 123,456 | msg:–î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
      –¢–µ–∫—Å—Ç | ntf:–ë–µ–∑ –∞–ª–µ—Ä—Ç–∞ | 789 | msg:–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    """
    rows: list[list[dict]] = []
    button_index = 0

    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue

        # –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ ';'
        btn_texts = [b.strip() for b in line.split(';') if b.strip()]
        row: list[dict] = []

        for raw in btn_texts:
            parts = [p.strip() for p in raw.split('|')]
            if len(parts) < 2:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: '{raw}'")

            btn = {"text": parts[0]}
            primary_notification = None
            primary_alert = False
            allowed_ids = None
            unauthorized_message = None

            # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
            for part in parts[1:]:
                # URL / void
                if part == "void":
                    btn["url"] = "http://void"
                elif part.startswith("http") or part.startswith("tg://"):
                    btn["url"] = part

                # –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (msg: ‚Äî —Å –∞–ª–µ—Ä—Ç–æ–º)
                elif part.startswith("msg:") and primary_notification is None:
                    primary_notification = part.split(":", 1)[1]
                    primary_alert = True

                # –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∞–ª–µ—Ä—Ç–∞
                elif part.startswith(("ntf:", "notification:")) and primary_notification is None:
                    primary_notification = part.split(":", 1)[1]
                    primary_alert = False

                # —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ID
                elif re.fullmatch(r'\d+(?:\s*,\s*\d+)*', part):
                    allowed_ids = [int(x.strip()) for x in part.split(",")]

                # –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
                elif part.startswith("msg:") and primary_notification is not None and allowed_ids is not None:
                    unauthorized_message = part.split(":", 1)[1]

                # –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                elif part.startswith("copy:"):
                    btn["callback_data"] = f"copy_{uuid.uuid4().hex}"
                    btn["copy_text"] = part.split(":", 1)[1]

                # inline-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                elif part.startswith("inline:"):
                    btn["switch_inline_query"] = part.split(":", 1)[1]
                elif part.startswith("inline_current:"):
                    btn["switch_inline_query_current_chat"] = part.split(":", 1)[1]
                elif part.startswith("inline_chosen:"):
                    btn["switch_inline_query_chosen_chat"] = part.split(":", 1)[1]

                # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π callback_data (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω)
                else:
                    if "callback_data" not in btn and "url" not in btn:
                        btn["callback_data"] = part

            # –µ—Å–ª–∏ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è
            if primary_notification is not None:
                btn["callback_data"] = f"bt_{post_id}_{button_index}"
                button_index += 1
                btn["notification"] = primary_notification
                btn["show_alert"] = primary_alert

            if allowed_ids is not None:
                btn["allowed_ids"] = allowed_ids
            if unauthorized_message is not None:
                btn["unauthorized_message"] = unauthorized_message

            # —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            row.append(btn)

        if row:
            rows.append(row)

    return rows


# --- Handlers ---
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Çüìî")
async def start_creation(message: Message, state: FSMContext) -> None:
    await state.set_state(PostState.waiting_for_text)
    await state.update_data(private=False, buttons=[])
    await message.reply(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:\n<i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É</i>(<b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i> –∏ <u>–ø—Ä–æ—á–∏–µ</u>)!",
        reply_markup=cancel_button()
        )


@router.message(PostState.waiting_for_text)
async def got_text(message: Message, state: FSMContext) -> None:
    html_text = message.html_text or message.text or message.caption or ""
    await state.update_data(text=html_text)
    await show_preview(message, state)


@router.callback_query(F.data == "toggle_privacy")
async def toggle_privacy(cq: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    is_priv = not data.get('private', False)
    await state.update_data(private=is_priv)
    await cq.message.edit_reply_markup(reply_markup=privacy_markup(is_priv))
    await cq.answer()


@router.callback_query(F.data == "continue_creation")
async def continue_to_id(cq: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(PostState.waiting_for_id)
    await cq.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á—ë—Ä–∫–∏):\n<i>–°–æ–≤–µ—Ç: –∏–Ω–∏—Ü–∏–∞–ª—ã–†–ü_—Ä–æ–ª—å_—Ç–∏–ø_–Ω–æ–º–µ—Ä</i>\n–ü—Ä–∏–º–µ—Ä: sgrp_dottore_post_4")
    await cq.answer()


@router.message(PostState.waiting_for_id)
async def got_id(message: Message, state: FSMContext) -> None:
    pid = message.text.strip()
    if not pid.replace('_', '').isalnum():
        await message.reply(text="ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.",
                            reply_markup=cancel_button())
        return
    with post_id_lock:
        if not storage.is_post_available(pid):
            await message.reply(text="–≠—Ç–æ—Ç ID —É–∂–µ –∑–∞–Ω—è—Ç, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π:", reply_markup=cancel_button())
            return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    image_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="no_image")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
    ])

    await state.update_data(post_id=pid)
    await state.set_state(PostState.waiting_for_image)
    await message.reply(
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n–ü—Ä–∏–º–µ—Ä: https://img4.teletype.in/files/f2/47/...\n\n–°–æ–≤–µ—Ç! –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ teletype, –∞ –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'.",
        reply_markup=image_markup
    )


@router.callback_query(F.data == "no_image", PostState.waiting_for_image)
async def no_image_callback(cq: CallbackQuery, state: FSMContext):
    await state.update_data(image='')
    await state.set_state(PostState.waiting_for_buttons)
    await cq.message.delete()

    buttons_markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –ë–µ–∑ –∫–Ω–æ–ø–æ–∫", callback_data="no_buttons")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
    ])

    await cq.message.answer(
        text="""–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É:
–ö–Ω–æ–ø–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ | void
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | msg:–î–ª—è –≤–∞—Å!
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä–µ–ø–µ | ntf:–°–æ–æ–±—â–µ–Ω–∏–µ
–ö–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–∞ | https://google.com
–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ | copy:–¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

–î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º:
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ | msg:–î–ª—è –≤–∞—Å! | 123,456 | msg:–î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö!
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –∞–ª–µ—Ä—Ç–∞ | ntf:–°–æ–æ–±—â–µ–Ω–∏–µ | 789 | msg:–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞

–†–∞–∑–¥–µ–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ ;  
–ö–Ω–æ–ø–∫–∞1 | void ; –ö–Ω–æ–ø–∫–∞2 | void ; ....

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ë–µ–∑ –∫–Ω–æ–ø–æ–∫".""",
        reply_markup=buttons_markup,
        parse_mode=None
    )
    await cq.answer()


@router.message(PostState.waiting_for_image)
async def got_image(message: Message, state: FSMContext) -> None:
    img: str = message.text.strip()
    if img.lower() in ('–Ω–µ—Ç', 'no', 'none', '–±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'):
        img: str = ''

    await state.update_data(image=img)
    await show_preview(message, state)


@router.callback_query(PostState.waiting_for_buttons, F.data == "no_buttons")
async def no_buttons_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data(buttons=[])
    await show_preview(callback.message, state)
    await callback.answer()


@router.callback_query(PostState.waiting_for_buttons, F.data == "finish_buttons")
async def finish_buttons_handler(callback: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    final = []
    for row in data.get('buttons', []):
        final_row = []
        for b in row:
            btn = {"text": b["text"]}
            if "url" in b:
                btn["url"] = b["url"]
            if "switch_inline_query" in b:
                btn["switch_inline_query"] = b["switch_inline_query"]
            if "callback_data" in b:
                btn["callback_data"] = b["callback_data"]
                if "notification" in b:
                    btn["notification"] = b["notification"]
                    btn["show_alert"] = b.get("show_alert", False)
            final_row.append(btn)
        final.append(final_row)

    await state.update_data(buttons=final)
    await show_preview(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "cancel_creation")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


# --- Preview and Edit Handlers ---
async def show_preview(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    text = data.get('text', '')
    image = data.get('image', '')
    buttons = data.get('buttons', [])
    private = data.get('private', False)
    post_id = data.get('post_id', '')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = f"<b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê</b>\n\n{text}\n\n"
    preview_text += f"üÜî ID: <code>{post_id}</code>\n"
    preview_text += f"üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: {'–ü—Ä–∏–≤–∞—Ç–Ω—ã–π' if private else '–ü—É–±–ª–∏—á–Ω—ã–π'}\n"

    if image:
        preview_text += f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image}\n"
    else:
        preview_text += f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"

    if buttons:
        preview_text += "\nüîò –ö–Ω–æ–ø–∫–∏:\n"
        for row in buttons:
            preview_text += " | ".join([btn['text'] for btn in row]) + "\n"
    else:
        preview_text += "\nüîò –ö–Ω–æ–ø–∫–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_post"),
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_post")
        ],
        [
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_creation")
        ]
    ])

    await state.set_state(PostState.preview)
    await message.answer(preview_text, reply_markup=preview_markup, disable_web_page_preview=True)


@router.callback_query(PostState.preview, F.data == "edit_post")
async def edit_post_handler(cq: CallbackQuery, state: FSMContext) -> None:
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data="edit_field:text"),
            InlineKeyboardButton(text="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_field:image"),
        ],
        [
            InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∏", callback_data="edit_field:buttons"),
            InlineKeyboardButton(text="ID", callback_data="edit_field:id"),
        ],
        [
            InlineKeyboardButton(text="–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å", callback_data="edit_field:privacy"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_preview"),
        ]
    ])

    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_markup)
    await state.set_state(PostState.editing_choice)
    await cq.answer()


@router.callback_query(PostState.editing_choice, F.data == "back_to_preview")
async def back_to_preview(cq: CallbackQuery, state: FSMContext) -> None:
    await show_preview(cq.message, state)
    await cq.answer()


@router.callback_query(PostState.editing_choice, F.data.startswith("edit_field:"))
async def handle_field_edit(cq: CallbackQuery, state: FSMContext) -> None:
    field = cq.data.split(":")[1]

    if field == "text":
        await state.set_state(PostState.waiting_for_text)
        await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:", reply_markup=cancel_button())

    elif field == "image":
        await state.set_state(PostState.waiting_for_image)
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö´ –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="no_image")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
        ])
        await cq.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è':",
            reply_markup=markup
        )

    elif field == "buttons":
        await state.set_state(PostState.waiting_for_buttons)
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö´ –ë–µ–∑ –∫–Ω–æ–ø–æ–∫", callback_data="no_buttons")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")]
        ])
        await cq.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –∫–Ω–æ–ø–æ–∫':",
            reply_markup=markup
        )

    elif field == "id":
        await state.set_state(PostState.waiting_for_id)
        await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –ø–æ—Å—Ç–∞:", reply_markup=cancel_button())

    elif field == "privacy":
        data = await state.get_data()
        await state.set_state(PostState.waiting_for_privacy)
        await cq.message.edit_text(
            "–ò–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞:",
            reply_markup=privacy_markup(data.get('private', False))
        )

    await cq.answer()


@router.callback_query(PostState.preview, F.data == "confirm_post")
async def confirm_post_handler(cq: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    post_id = data['post_id']

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    storage.save_post(post_id, {
        'text': data['text'],
        'image': data.get('image', ''),
        'buttons': data.get('buttons', []),
        'private': data['private'],
        'post_id': post_id
    })

    await cq.message.edit_text(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: <code>{post_id}</code>")
    await state.clear()
    await cq.answer()
